from fpdf import FPDF
from datetime import datetime
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
import tempfile
import os
import matplotlib.gridspec as gridspec

class PDFReportGenerator:
    def __init__(self, report_data, health_metrics, health_ranges, eeg_data_path):
        """
        Initialize PDF Report Generator

        Parameters:
        report_data: Dictionary containing sleep assessment data
        health_metrics: Dictionary containing health metrics
        health_ranges: Reference ranges for health metrics
        eeg_data_path: Path to EEG data file
        """
        self.report_data = report_data
        self.health_metrics = health_metrics
        self.health_ranges = health_ranges
        self.eeg_data_path = eeg_data_path
        self.temp_images = []  # Store temporary image file paths

        # 睡眠阶段映射（英文）
        self.stage_map = {
            0: "Wake",
            1: "N1",
            2: "N2",
            3: "N3",
            4: "REM"
        }

        # 更新为低饱和度颜色映射 - 柔和色调
        self.stage_colors = {
            0: (0.4, 0.6, 0.8),  # 浅蓝色 - Wake
            1: (0.6, 0.8, 0.9),  # 淡青色 - N1
            2: (0.6, 0.8, 0.6),  # 淡绿色 - N2
            3: (0.8, 0.5, 0.5),  # 柔红色 - N3
            4: (0.8, 0.7, 1.0)  # 淡紫色 - REM
        }

    def generate_report(self, file_path):
        """
        Generate PDF report and save to specified path

        Parameters:
        file_path: Path to save the PDF file

        Returns:
        (success: bool, message: str) - Indicates success and related message
        """
        try:
            # Create PDF object
            pdf = FPDF()
            pdf.add_page()

            # Add title
            self.add_report_header(pdf)

            # Add sleep metrics table
            pdf.cell(0, 10, "Sleep Assessment Metrics", ln=True, align='L')
            pdf.ln(5)
            self.add_sleep_metrics_table(pdf)
            pdf.ln(10)

            # Add health metrics table
            pdf.cell(0, 10, "Health Monitoring Metrics", ln=True, align='L')
            pdf.ln(5)
            self.add_health_metrics_table(pdf)
            pdf.ln(15)

            # Add sleep stage plots if EEG data is available
            if self.eeg_data_path and os.path.exists(self.eeg_data_path):
                pdf.add_page()  # New page
                self.add_sleep_stage_plots(pdf)

            # Add report footer
            pdf.ln(5)
            pdf.set_font("Arial", "I", 10)
            pdf.cell(0, 8, "Report generated by Sleep Monitoring System", ln=True, align='C')

            # Save PDF file
            pdf_output = file_path.encode('latin-1', 'ignore').decode('latin-1')
            pdf.output(pdf_output)

            # Clean up temporary files
            for img_path in self.temp_images:
                if os.path.exists(img_path):
                    os.remove(img_path)

            return True, f"Report successfully exported to: {file_path}"
        except Exception as e:
            # Ensure cleanup of temporary files
            for img_path in self.temp_images:
                if os.path.exists(img_path):
                    os.remove(img_path)
            return False, f"Report generation failed: {str(e)}"

    def add_report_header(self, pdf):
        """Add report header information"""
        # Set font and add title
        pdf.set_font("Arial", "B", 16)
        pdf.cell(0, 15, "Sleep Quality Assessment Report", ln=True, align='C')
        pdf.ln(5)

        # Add generation date
        pdf.set_font("Arial", size=10)
        pdf.cell(0, 8, f"Generated Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True, align='C')
        pdf.ln(10)

        # Set content font
        pdf.set_font("Arial", size=12)
        pdf.set_text_color(0, 0, 0)  # Black

    def add_sleep_metrics_table(self, pdf):
        """Add sleep metrics table"""
        sleep_metrics = [
            ("Total Sleep Duration", "sleep_duration", "hours"),
            ("Deep Sleep Ratio", "deep_sleep", "%"),
            ("Light Sleep Ratio", "light_sleep", "%"),
            ("REM Sleep Ratio", "rem_sleep", "%"),
            ("Sleep Latency", "sleep_latency", "min"),
            ("Number of Awakenings", "awakenings", "times"),
            ("Sleep Efficiency", "sleep_efficiency", "%"),
            ("Sleep Quality Score", "sleep_score", "/100")
        ]

        # Set table styling
        pdf.set_fill_color(220, 230, 255)  # Header background
        pdf.set_text_color(0, 0, 0)
        pdf.set_font("Arial", "B", 10)

        # Table header
        pdf.cell(70, 8, "Metric", border=1, fill=True)
        pdf.cell(40, 8, "Value", border=1, fill=True)
        pdf.cell(40, 8, "Rating", border=1, fill=True, ln=True)

        pdf.set_font("Arial", size=10)
        pdf.set_fill_color(245, 245, 245)  # Row background

        for name, key, unit in sleep_metrics:
            # Get and format value
            value = self.report_data.get(key, 0)
            if key == "sleep_score":
                formatted_value = f"{value:.0f}{unit}"
            elif key == "sleep_latency":
                formatted_value = f"{value:.1f}{unit}"
            elif key == "awakenings":
                formatted_value = f"{int(value)}{unit}"
            else:
                formatted_value = f"{value:.1f}{unit}"

            # Determine color and rating
            rating_text = ""
            color = (0, 0, 0)  # Black

            if key in ["sleep_efficiency", "sleep_score"]:
                if key == "sleep_efficiency":
                    if value >= 85:
                        rating_text = "Excellent"
                        color = (34, 139, 34)  # Green
                    elif value >= 70:
                        rating_text = "Good"
                        color = (65, 105, 225)  # Blue
                    else:
                        rating_text = "Poor"
                        color = (220, 20, 60)  # Red
                else:  # sleep_score
                    if value >= 85:
                        rating_text = "Excellent"
                        color = (34, 139, 34)  # Green
                    elif value >= 70:
                        rating_text = "Good"
                        color = (65, 105, 225)  # Blue
                    else:
                        rating_text = "Poor"
                        color = (220, 20, 60)  # Red

            # Print table row
            pdf.set_text_color(0, 0, 0)  # Black text
            pdf.cell(70, 8, name, border=1, fill=1)

            pdf.set_text_color(color[0], color[1], color[2])
            pdf.cell(40, 8, formatted_value, border=1, fill=1)

            if rating_text:  # For rated metrics
                pdf.set_text_color(color[0], color[1], color[2])
                pdf.cell(40, 8, rating_text, border=1, fill=1, ln=True)
            else:  # For other metrics
                pdf.set_text_color(128, 128, 128)  # Gray
                pdf.cell(40, 8, "", border=1, fill=1, ln=True)

    def add_health_metrics_table(self, pdf):
        """Add health metrics table"""
        # Set table styling
        pdf.set_fill_color(220, 230, 255)  # Header background
        pdf.set_text_color(0, 0, 0)
        pdf.set_font("Arial", "B", 10)

        # Table header
        pdf.cell(60, 8, "Health Metric", border=1, fill=True)
        pdf.cell(40, 8, "Value", border=1, fill=True)
        pdf.cell(40, 8, "Normal Range", border=1, fill=True)
        pdf.cell(40, 8, "Status", border=1, fill=True, ln=True)

        pdf.set_font("Arial", size=10)
        pdf.set_fill_color(245, 245, 245)  # Row background

        health_items = [
            ("heart_rate", "Heart Rate", "bpm"),
            ("blood_oxygen", "Blood Oxygen", "%"),
            ("temperature", "Body Temperature", "°C"),
            ("respiration_rate", "Respiration Rate", "bpm"),
            ("ambient_temp", "Ambient Temperature", "°C"),
            ("fatigue", "Fatigue Index", ""),
            ("systolic_bp", "Systolic BP", "mmHg"),
            ("diastolic_bp", "Diastolic BP", "mmHg")
        ]

        for key, name, unit in health_items:
            # Get value and range
            value = self.health_metrics.get(key, 0) if self.health_metrics else 0
            min_val, max_val, _ = self.health_ranges.get(key, (0, 0, ""))

            # Format value
            if unit:
                formatted_value = f"{value:.1f} {unit}"
                range_text = f"{min_val:.0f}-{max_val:.0f} {unit}"
            else:
                formatted_value = f"{value:.0f}"
                range_text = f"{min_val:.0f}-{max_val:.0f}"

            # Determine status and color
            if value < min_val:
                status = "Low"
                color = (220, 20, 60)  # Red
            elif value > max_val:
                status = "High"
                color = (220, 20, 60)  # Red
            else:
                status = "Normal"
                color = (34, 139, 34)  # Green

            # Print table row
            pdf.set_text_color(0, 0, 0)  # Black metric name
            pdf.cell(60, 8, name, border=1, fill=1)

            pdf.set_text_color(color[0], color[1], color[2])  # Status color for value
            pdf.cell(40, 8, formatted_value, border=1, fill=1)

            pdf.set_text_color(0, 0, 0)  # Black for range
            pdf.cell(40, 8, range_text, border=1, fill=1)

            pdf.set_text_color(color[0], color[1], color[2])  # Status color for status
            pdf.cell(40, 8, status, border=1, fill=1, ln=True)

    def add_sleep_stage_plots(self, pdf):
        """Add sleep stage plots with legend on pie chart"""
        try:
            # Load EEG data
            df = pd.read_csv(self.eeg_data_path)

            # Prepare data
            stage_mapping = {'W': 0, 'N1': 1, 'N2': 2, 'N3': 3, 'REM': 4}
            df['Stage_Numeric'] = df['Stage_Label'].map(stage_mapping)

            # Calculate sleep stage distribution
            stage_counts = df['Stage_Label'].value_counts()
            total_epochs = len(df)

            # 创建共享颜色映射的图例元素（使用图片中的颜色）
            legend_elements = [
                Patch(facecolor=(0.4, 0.6, 0.8), label="Wake"),  # 浅蓝色 - Wake
                Patch(facecolor=(0.6, 0.8, 0.9), label="N1"),  # 淡青色 - N1
                Patch(facecolor=(0.6, 0.8, 0.6), label="N2"),  # 淡绿色 - N2
                Patch(facecolor=(0.8, 0.5, 0.5), label="N3"),  # 柔红色 - N3
                Patch(facecolor=(0.8, 0.7, 1.0), label="REM")  # 淡紫色 - REM
            ]

            # 创建图形布局
            fig = plt.figure(figsize=(14, 6))

            # 创建GridSpec布局：饼图 | 阶段图 (1:2 比例)
            gs = gridspec.GridSpec(1, 2, width_ratios=[1, 2])  # 1:2的比例

            # 左: 饼图（包含图例）
            ax1 = plt.subplot(gs[0])
            self.create_stage_pie_chart(ax1, stage_counts, total_epochs, legend_elements=legend_elements)

            # 右: 睡眠阶段图
            ax2 = plt.subplot(gs[1])
            self.create_sleep_progression_plot(ax2, df, show_legend=False)

            # 整体图表标题
            plt.suptitle("Sleep Stage Analysis", fontsize=14, fontweight='bold', y=0.98)
            plt.tight_layout(pad=2.0, rect=[0, 0, 1, 0.95])

            # 保存并添加到PDF...
            combined_path = tempfile.NamedTemporaryFile(suffix='.png', delete=False).name
            plt.savefig(combined_path, dpi=150, bbox_inches='tight')
            self.temp_images.append(combined_path)
            plt.close()

            pdf.image(combined_path, x=10, y=None, w=190)
            pdf.ln(5)

        except Exception as e:
            print(f"Sleep stage plot generation failed: {str(e)}")

    def create_stage_pie_chart(self, ax, stage_counts, total_epochs, legend_elements=None):
        """Create pie chart with optimized layout"""
        # 只保留主要睡眠阶段（Wake, N1, N2, N3, REM）
        valid_stages = ['W', 'N1', 'N2', 'N3', 'REM']
        stage_counts = {k: v for k, v in stage_counts.items() if k in valid_stages}

        # 按顺序排列阶段
        stages_order = ['W', 'N1', 'N2', 'N3', 'REM']
        sizes = [stage_counts.get(stage, 0) for stage in stages_order]

        # 获取对应颜色的数字值
        stage_nums = {
            'W': 0,
            'N1': 1,
            'N2': 2,
            'N3': 3,
            'REM': 4
        }
        colors = [self.stage_colors[stage_nums[stage]] for stage in stages_order]

        # 创建饼图（移除阴影效果）
        wedges, _ = ax.pie(
            sizes,
            colors=colors,
            startangle=90,
            shadow=False,
            # 增加饼图边缘宽度，使饼图更饱满
            wedgeprops={'edgecolor': 'gray', 'linewidth': 0.5}
        )

        # 计算百分比
        percentages = [100 * size / total_epochs for size in sizes]

        # 添加清晰的百分比和数量标签
        for i, wedge in enumerate(wedges):
            # 百分比和数量文本
            percentage = percentages[i]
            count = sizes[i]
            label = f"{percentage:.1f}%\n({count})"

            # 计算标签位置（稍微向外移动）
            angle = (wedge.theta2 - wedge.theta1) * 0.5 + wedge.theta1
            x = 0.8 * np.cos(np.deg2rad(angle))
            y = 0.8 * np.sin(np.deg2rad(angle))

            # 添加文本（使用与楔形区对比度高的颜色）
            text_color = 'black' if percentage > 5 else 'white'
            ax.text(x, y, label,
                    ha='center', va='center',
                    fontsize=9, color=text_color,
                    fontweight='bold')

        # 添加图例（放置在饼图内部右侧）
        if legend_elements:
            # 调整图例位置在饼图内部右侧，节省空间
            ax.legend(handles=legend_elements,
                      loc='center left',
                      bbox_to_anchor=(1.05, 0.5),  # 放在饼图右侧
                      frameon=False,
                      fontsize=10)

        # 标题
        ax.set_title(f"Sleep Stage Distribution\n(Total Epochs: {total_epochs})",
                     fontsize=12, fontweight='bold', pad=10)
        ax.axis('equal')

    def create_sleep_progression_plot(self, ax, df, show_legend=False):
        """Create sleep stage progression plot (scatter plot) for subplot"""
        # Set background color
        ax.set_facecolor((0.98, 0.98, 0.98))  # Very light gray background

        # Get stage numeric values
        y_target = df['Stage_Numeric'].values

        # Create time axis in hours
        x_axis = np.arange(len(y_target)) / 120  # Convert epochs to hours (120 epochs per hour)

        # Map stages to colors
        point_colors = [self.stage_colors.get(stage, (0.8, 0.8, 0.8)) for stage in y_target]

        # Create scatter plot
        ax.scatter(x_axis, y_target, c=point_colors, s=5, alpha=0.8)

        # Set axes and labels
        ax.set_yticks(list(self.stage_map.keys()), list(self.stage_map.values()))
        ax.set_xlabel('Time (Hours)', fontsize=10, color='black')
        ax.set_ylabel('Sleep Stage', fontsize=10, color='black')
        ax.set_title('Sleep Stage Progression Over Time', fontsize=12, fontweight='bold', color='black')

        # Add grid
        ax.grid(alpha=0.3, linestyle='--', color='lightgrey')

        # Add legend (位置调整到右上角，避免与标签重叠)
        legend_elements = [
            Patch(facecolor=self.stage_colors[0], edgecolor='lightgrey', label=self.stage_map[0]),
            Patch(facecolor=self.stage_colors[1], edgecolor='lightgrey', label=self.stage_map[1]),
            Patch(facecolor=self.stage_colors[2], edgecolor='lightgrey', label=self.stage_map[2]),
            Patch(facecolor=self.stage_colors[3], edgecolor='lightgrey', label=self.stage_map[3]),
            Patch(facecolor=self.stage_colors[4], edgecolor='lightgrey', label=self.stage_map[4])
        ]
        if show_legend:
            ax.legend(handles=legend_elements, loc='upper right', fontsize=9)