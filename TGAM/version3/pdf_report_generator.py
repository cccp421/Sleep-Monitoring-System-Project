from fpdf import FPDF
from datetime import datetime


class PDFReportGenerator:
    def __init__(self, report_data, health_metrics, health_ranges):
        """
        初始化PDF报告生成器

        参数:
        report_data: 包含睡眠评估数据的字典
        health_metrics: 包含健康指标的字典
        health_ranges: 健康指标的参考范围字典
        """
        self.report_data = report_data
        self.health_metrics = health_metrics
        self.health_ranges = health_ranges

    def generate_report(self, file_path):
        """
        生成PDF报告并保存到指定路径

        参数:
        file_path: 要保存的PDF文件路径

        返回:
        (success: bool, message: str) - 表示生成是否成功和相关信息
        """
        try:
            pdf = FPDF()
            pdf.add_page()

            # 设置字体和添加标题
            pdf.set_font("Arial", "B", 16)
            pdf.cell(0, 15, "Sleep Quality Assessment Report", ln=True, align="C")
            pdf.ln(5)

            # 添加报告生成日期
            pdf.set_font("Arial", size=10)
            pdf.cell(0, 8, f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=True, align="C")
            pdf.ln(10)

            # 设置内容字体
            pdf.set_font("Arial", size=12)
            pdf.set_text_color(0, 0, 0)  # 黑色

            # 添加睡眠指标表格
            pdf.cell(0, 10, "Sleep Metrics", ln=True, align="L")
            pdf.ln(5)

            # 创建睡眠指标表格
            self.add_sleep_metrics_table(pdf)
            pdf.ln(10)

            # 添加健康指标表格
            pdf.cell(0, 10, "Health Metrics", ln=True, align="L")
            pdf.ln(5)

            # 创建健康指标表格
            self.add_health_metrics_table(pdf)

            # 添加报告结尾
            pdf.ln(15)
            pdf.set_font("Arial", "I", 10)
            pdf.cell(0, 8, "Report generated by Sleep Monitoring System", ln=True, align="C")

            # 保存PDF文件
            pdf_output = file_path.encode('latin-1', 'ignore').decode('latin-1')
            pdf.output(pdf_output)

            return True, f"Report successfully generated: {file_path}"
        except Exception as e:
            return False, f"Report generation failed: {str(e)}"

    def add_sleep_metrics_table(self, pdf):
        """添加睡眠指标表格"""
        sleep_metrics = [
            ("Total Sleep Duration", "sleep_duration", "hours"),
            ("Deep Sleep (%)", "deep_sleep", "%"),
            ("Light Sleep (%)", "light_sleep", "%"),
            ("REM Sleep (%)", "rem_sleep", "%"),
            ("Sleep Latency", "sleep_latency", "min"),
            ("Awakenings", "awakenings", "times"),
            ("Sleep Efficiency", "sleep_efficiency", "%"),
            ("Sleep Quality Score", "sleep_score", "/100")
        ]

        # 设置表格样式
        pdf.set_fill_color(220, 230, 255)  # 表头背景色
        pdf.set_text_color(0, 0, 0)
        pdf.set_font("Arial", "B", 10)

        # 表头
        pdf.cell(70, 8, "Metric", border=1, fill=True)
        pdf.cell(40, 8, "Value", border=1, fill=True)
        pdf.cell(40, 8, "Rating", border=1, fill=True, ln=True)

        pdf.set_font("Arial", size=10)
        pdf.set_fill_color(245, 245, 245)  # 行背景色

        for name, key, unit in sleep_metrics:
            # 获取值并格式化
            value = self.report_data.get(key, 0)
            if key == "sleep_score":
                formatted_value = f"{value:.0f}{unit}"
            elif key == "sleep_latency":
                formatted_value = f"{value:.1f}{unit}"
            elif key == "awakenings":
                formatted_value = f"{int(value)}{unit}"
            else:
                formatted_value = f"{value:.1f}{unit}"

            # 确定颜色和评级
            rating_text = ""
            color = (0, 0, 0)  # 黑色

            if key in ["sleep_efficiency", "sleep_score"]:
                if key == "sleep_efficiency":
                    if value >= 85:
                        rating_text = "Excellent"
                        color = (34, 139, 34)  # 绿色
                    elif value >= 70:
                        rating_text = "Good"
                        color = (65, 105, 225)  # 蓝色
                    else:
                        rating_text = "Poor"
                        color = (220, 20, 60)  # 红色
                else:  # sleep_score
                    if value >= 85:
                        rating_text = "Excellent"
                        color = (34, 139, 34)  # 绿色
                    elif value >= 70:
                        rating_text = "Good"
                        color = (65, 105, 225)  # 蓝色
                    else:
                        rating_text = "Poor"
                        color = (220, 20, 60)  # 红色

            # 打印表格行
            pdf.set_text_color(0, 0, 0)  # 黑色文本
            pdf.cell(70, 8, name, border=1, fill=1)

            if rating_text:  # 对于有评级的指标
                pdf.set_text_color(color[0], color[1], color[2])
                pdf.cell(40, 8, formatted_value, border=1, fill=1)

                pdf.set_text_color(color[0], color[1], color[2])
                pdf.cell(40, 8, rating_text, border=1, fill=1, ln=True)
            else:  # 对于其他指标
                pdf.set_text_color(0, 0, 128)  # 深蓝色值
                pdf.cell(40, 8, formatted_value, border=1, fill=1)

                pdf.set_text_color(128, 128, 128)  # 灰色评级
                pdf.cell(40, 8, "", border=1, fill=1, ln=True)

    def add_health_metrics_table(self, pdf):
        """添加健康指标表格"""
        # 设置表格样式
        pdf.set_fill_color(220, 230, 255)  # 表头背景色
        pdf.set_text_color(0, 0, 0)
        pdf.set_font("Arial", "B", 10)

        # 表头
        pdf.cell(60, 8, "Health Metric", border=1, fill=True)
        pdf.cell(40, 8, "Value", border=1, fill=True)
        pdf.cell(40, 8, "Normal Range", border=1, fill=True)
        pdf.cell(40, 8, "Status", border=1, fill=True, ln=True)

        pdf.set_font("Arial", size=10)
        pdf.set_fill_color(245, 245, 245)  # 行背景色

        health_items = [
            ("heart_rate", "Heart Rate", "bpm"),
            ("blood_oxygen", "Blood Oxygen", "%"),
            ("temperature", "Body Temperature", "C"),
            ("respiration_rate", "Respiration Rate", "bpm"),
            ("ambient_temp", "Ambient Temperature", "C"),
            ("fatigue", "Fatigue Index", ""),
            ("systolic_bp", "Systolic BP", "mmHg"),
            ("diastolic_bp", "Diastolic BP", "mmHg")
        ]

        for key, name, unit in health_items:
            # 获取值和范围
            value = self.health_metrics.get(key, 0)
            min_val, max_val, _ = self.health_ranges.get(key, (0, 0, ""))

            # 格式化值
            if unit:
                formatted_value = f"{value:.1f} {unit}" if key != "fatigue" else f"{value:.0f}"
                range_text = f"{min_val:.0f}-{max_val:.0f} {unit}"
            else:
                formatted_value = f"{value:.0f}"
                range_text = f"{min_val:.0f}-{max_val:.0f}"

            # 确定状态和颜色
            if value < min_val:
                status = "Low"
                color = (220, 20, 60)  # 红色
            elif value > max_val:
                status = "High"
                color = (220, 20, 60)  # 红色
            else:
                status = "Normal"
                color = (34, 139, 34)  # 绿色

            # 打印表格行
            pdf.set_text_color(0, 0, 0)  # 黑色指标名称
            pdf.cell(60, 8, name, border=1, fill=1)

            pdf.set_text_color(color[0], color[1], color[2])  # 状态颜色值
            pdf.cell(40, 8, formatted_value, border=1, fill=1)

            pdf.set_text_color(0, 0, 0)  # 黑色范围
            pdf.cell(40, 8, range_text, border=1, fill=1)

            pdf.set_text_color(color[0], color[1], color[2])  # 状态颜色状态
            pdf.cell(40, 8, status, border=1, fill=1, ln=True)